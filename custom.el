(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
 '(backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/"))))
 '(bm-electric-show nil)
 '(c-offsets-alist (quote ((brace-list-intro . 0))))
 '(case-fold-search t)
 '(coffee-tab-width 2)
 '(column-number-mode t)
 '(comint-history-isearch (quote dwim))
 '(comint-input-ring-file-name nil)
 '(comment-empty-lines t)
 '(company-require-match nil)
 '(css-indent-offset 2)
 '(current-language-environment "UTF-8")
 '(default-input-method "rfc1345")
 '(default-text-scale-amount 20)
 '(display-battery-mode t)
 '(espresso-expr-indent-offset 4)
 '(espresso-indent-level 4)
 '(ethan-wspace-errors (quote (many-nls-eof no-nl-eof eol)))
 '(explicit-shell-file-name nil)
 '(fill-column 78)
 '(flycheck-check-syntax-automatically (quote (save mode-enabled)))
 '(flycheck-checkers
   (quote
    (ada-gnat asciidoc c/c++-clang c/c++-gcc c/c++-cppcheck cfengine chef-foodcritic coffee coffee-coffeelint coq css-csslint d-dmd emacs-lisp emacs-lisp-checkdoc erlang eruby-erubis fortran-gfortran go-gofmt go-golint go-vet go-build go-test go-errcheck groovy haml handlebars haskell-stack-ghc haskell-ghc haskell-hlint html-tidy jade javascript-jshint javascript-eslint javascript-gjslint javascript-jscs javascript-standard json-jsonlint json-python-json less luacheck lua perl perl-perlcritic php php-phpmd php-phpcs puppet-parser puppet-lint python-flake8 python-pylint python-pycompile r-lintr racket rpm-rpmlint rst-sphinx rst ruby-rubocop ruby-rubylint ruby ruby-jruby rust sass scala scala-scalastyle scss-lint scss sh-bash sh-posix-dash sh-posix-bash sh-zsh sh-shellcheck slim sql-sqlint tex-chktex tex-lacheck texinfo verilog-verilator xml-xmlstarlet xml-xmllint yaml-jsyaml yaml-ruby)))
 '(flycheck-coffee-coffeelint-executable "/home/erik/heavygoods/node_modules/.bin/coffeelint")
 '(flycheck-disabled-checkers (quote (javascript-jshint javascript-jscs)))
 '(flycheck-eslintrc ".eslintrc")
 '(flycheck-jscs ".jscsrc")
 '(flycheck-temp-prefix ".flycheck")
 '(flymake-jslint-args
   (quote
    ("--white" "--unparam" "--todo" "--nomen" "--regexp" "--plusplus" "--bitwise" "--browser" "--nomen" "--predef" "$" "--predef" "jQuery" "--maxerror" "16")))
 '(flymake-jslint-command "jslint")
 '(flymake-jslint-detect-trailing-comma t)
 '(global-flycheck-mode nil)
 '(global-font-lock-mode t nil (font-lock))
 '(haskell-mode-hook
   (quote
    (capitalized-words-mode turn-on-haskell-decl-scan turn-on-haskell-doc turn-on-haskell-indent)))
 '(helm-buffer-details-flag nil)
 '(helm-mm-matching-method (quote multi2))
 '(helm-move-to-line-cycle-in-source t)
 '(highlight-symbol-idle-delay 0.3)
 '(ido-default-buffer-method (quote selected-window))
 '(ido-everywhere nil)
 '(ido-mode (quote both) nil (ido))
 '(ipython-command "ipython")
 '(js-auto-indent-flag nil)
 '(js-expr-indent-offset 4)
 '(js2-global-externs (quote ("angular" "_")))
 '(js2-indent-switch-body t)
 '(js2-strict-inconsistent-return-warning nil)
 '(js3-indent-level 4)
 '(list-matching-lines-default-context-lines 1)
 '(neo-confirm-change-root (quote off-p))
 '(neo-confirm-create-directory (quote off-p))
 '(neo-confirm-create-file (quote off-p))
 '(neo-confirm-kill-buffers-for-files-in-directory (quote off-p))
 '(neo-cwd-line-style (quote button))
 '(neo-dont-be-alone t)
 '(neo-keymap-style (quote concise))
 '(neo-smart-open t)
 '(neo-theme (quote arrow))
 '(neo-window-width 35)
 '(nrepl-popup-on-error nil)
 '(nrepl-popup-stacktraces nil)
 '(nrepl-popup-stacktraces-in-repl nil)
 '(nrepl-use-pretty-printing t)
 '(nyan-mode t)
 '(org-agenda-files (quote ("~/org/admin-journal.org" "~/org/notes.org")))
 '(org-outline-path-complete-in-steps nil)
 '(org-refile-use-outline-path t)
 '(package-selected-packages
   (quote
    (wgrep wgrep-helm markdown-mode helm git-commit flymake-easy flycheck f company color-theme haml-mode yasnippet yaml-mode web-mode vimish-fold tide tagedit tabbar sr-speedbar sql-indent smartparens shackle scss-mode scala-mode2 racer php-mode nyan-mode neotree multiple-cursors minimap markdown-mode+ magit js3-mode js2-mode idle-highlight highlight-symbol helm-projectile helm-dash haskell-mode go-mode flymake-python-pyflakes flycheck-rust egg default-text-scale csharp-mode company-racer color-theme-railscasts coffee-mode clojurescript-mode buffer-move browse-kill-ring bm autopair auto-highlight-symbol ace-jump-mode ac-nrepl ac-cider)))
 '(projectile-enable-caching t)
 '(projectile-project-root-files
   (quote
    ("rebar.config" "project.clj" "SConstruct" "pom.xml" "build.sbt" "build.gradle" "Gemfile" "requirements.txt" "setup.py" "tox.ini" "package.json" "gulpfile.js" "Gruntfile.js" "bower.json" "composer.json" "Cargo.toml" "mix.exs" "main.js")))
 '(projectile-project-root-files-bottom-up
   (quote
    (".projectile" ".git" ".hg" ".fslckout" ".bzr" "_darcs")))
 '(projectile-use-git-grep t)
 '(py-align-multiline-strings-p t)
 '(py-python-command "ipython")
 '(py-python-command-args
   (quote
    ("-i" "-colors" "LightBG" "-nobanner" "-noconfirm_exit")))
 '(py-shell-switch-buffers-on-execute nil)
 '(python-python-command "ipython")
 '(ruby-insert-encoding-magic-comment nil)
 '(ruby-use-encoding-map t)
 '(scroll-bar-mode (quote right))
 '(scss-compile-at-save nil)
 '(sgml-basic-offset 4)
 '(show-paren-delay 0)
 '(show-paren-mode t nil (paren))
 '(show-paren-style (quote expression))
 '(size-indication-mode nil)
 '(sp-base-key-bindings (quote paredit))
 '(sql-pop-to-buffer-after-send-region nil)
 '(sql-product (quote mysql))
 '(swank-clojure-classpath
   (list "~/clj/clojure/clojure.jar" "~/clj/clojure-contrib/clojure-contrib.jar" "~/clj/swank-clojure/src/" "~/clj/neo4j-clojure/src" "~/src/neo4j-kernel-1.0-rc/*" "~/clj/clj-pivot/src" "~/clj/clj-pivot/classes" "~/clj/clj-pivot/examples/src" "~/clj/clj-pivot/examples/snippets" "~/clj/clj-pivot/icons" "~/src/apache-pivot-1.5/lib/*" "~/clj/tmp" "~/clj/spreadsheet-repl/src" "/usr/lib/jvm/java-6-sun/lib/tools.jar" "~/clj/clj-debug/src" "~/qm/src/" "~/clj/compojure/compojure.jar" "~/clj/compojure/deps/*" "~/clj/Clojure-yahoo-finance/lib/*" "~/clj/scriptjure/src" "~/clj/clojure-jna/src" "~/clj/cdc/src" "~/src/jnotify-src/jnotify/build/output/jnotify-0.93-PATCH.jar" "/usr/share/java/mysql.jar" "~/clj/metatron-experimental/src" "~/clj/metatron-experimental/build" "~/clj/criterium/src"))
 '(swank-clojure-extra-vm-args
   (list "-Xmx512M" "-Xdebug" "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888" "-Djava.ext.dirs=/usr/share/java"))
 '(table-cell-intersection-char 43)
 '(table-cell-vertical-char 124)
 '(tail-raise nil)
 '(tail-volatile nil)
 '(term-scroll-to-bottom-on-output t)
 '(tide-tsserver-executable "node_modules/.bin/tsserver")
 '(tramp-auto-save-directory "~/.emacs.d/tramp_backups")
 '(web-mode-code-indent-offset 4)
 '(web-mode-css-indent-offset 2)
 '(web-mode-enable-auto-indentation nil)
 '(web-mode-enable-auto-opening nil)
 '(web-mode-enable-auto-pairing nil)
 '(web-mode-enable-auto-quoting nil)
 '(web-mode-enable-control-block-indentation nil)
 '(web-mode-markup-indent-offset 4))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "RGB:FFFF/EAF6/CB8B" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "bitstream" :family "Bitstream Vera Sans Mono"))))
 '(bm-face ((t (:background "burlywood1" :box (:line-width 1 :color "dark orange") :slant normal))))
 '(diff-added ((t (:inherit diff-changed :foreground "darkgreen"))))
 '(diff-changed ((nil (:foreground "red"))))
 '(diff-indicator-added ((t (:inherit diff-added :foreground "darkgreen"))))
 '(diff-indicator-changed ((t (:inherit diff-changed :foreground "darkred"))))
 '(diff-removed ((t (:inherit diff-changed :foreground "darkred"))))
 '(font-lock-comment-face ((t (:foreground "Red3"))))
 '(font-lock-constant-face ((t (:foreground "DarkOrange3"))))
 '(font-lock-function-name-face ((t (:foreground "MediumBlue" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "CornflowerBlue" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "saddlebrown"))))
 '(fringe ((t (:background "RGB:EFFF/DAF6/AB8B"))))
 '(idle-highlight ((t (:inherit nil :background "PeachPuff2"))))
 '(mode-line ((((class color) (min-colors 88)) (:background "grey90" :foreground "black" :box (:line-width -1 :color "grey75")))))
 '(mode-line-inactive ((default (:inherit mode-line)) (((class color) (min-colors 88) (background light)) (:background "grey75" :foreground "grey20" :box (:line-width -1 :style released-button) :weight light))))
 '(outline-2 ((t (:foreground "#2b2bd5"))))
 '(outline-3 ((t (:foreground "#7777ea"))))
 '(outline-4 ((t (:foreground "#88a"))))
 '(outline-5 ((t (:foreground "dodgerblue"))))
 '(outline-6 ((t (:foreground "darkorchid3"))))
 '(region ((((class color) (min-colors 88) (background light)) (:background "grey75"))))
 '(table-cell ((t (:background "#f2d995" :foreground "black" :inverse-video nil))))
 '(tex-verbatim ((t (:foreground "deepskyblue3")))))
